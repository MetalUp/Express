{
    "Language": "python",
    "Title": "Conway's Game of Life - Part 7",
    "Description": "life_7.html",
    "Hints": ["life_7_hint1.html","life_7_hint2.html","life_7_hint3.html"],
    "Messages": [],
    "CodeMustMatch": {},
    "CodeMustNotContain": {},
    "ReadyMadeFunctions": "def next_cell_value(cells, c) : return will_live(cells[c], live_neighbours(cells, c))\ndef will_live(alive, neighbours) : return (neighbours > 1 and neighbours < 4) if alive else neighbours == 3\ndef live_neighbours(cells, c) : return len(list(filter(lambda c: cells[c] is True, adjusted_neighbour_cells(c))))\ndef adjusted_neighbour_cells(c): return list(map(lambda x :keep_within_bounds(x),neighbour_cells(c)))\ndef keep_within_bounds(i) : return  i - 400 if i >= 400 else  i + 400 if i < 0 else i\ndef neighbour_cells(c) : return [ c-21, c-20, c-19, c-1, c+1, c+19, c+20, c+21]\ndef as_grid(cells) : return reduce(lambda s, n : s +  (\"\\n\" if n > 0 and n % 20 == 0 else \"\")+(\"â–  \" if cells[n] else \"  \"), range(0, 400), \"Grid:\\n\")\nexample_cells = [False, True, False, True, False, False, True, True, True, False, False, True, True, False, True, True, False, False, True, True, True, True, True, True, False, False, True, False, True, True, True, False, True, True, True, True, False, True, False, True, False, False, True, True, False, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, True, False, False, True, False, False, True, True, False, False, False, True, True, False, False, True, True, False, True, True, True, True, False, False, False, False, False, False, False, False, True, True, False, True, False, False, True, True, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, True, False, False, False, True, False, False, True, True, False, True, False, True, True, False, False, False, False, False, True, False, False, True, False, True, False, True, False, True, False, True, False, False, True, False, True, False, True, False, False, True, False, False, True, True, False, True, False, False, True, False, True, False, True, True, False, False, False, False, True, False, False, True, False, False, False, False, True, False, False, False, True, False, True, False, True, False, False, False, False, False, True, True, False, True, True, False, False, False, False, False, True, False, False, True, True, True, False, False, False, True, False, True, False, False, True, True, False, True, False, True, False, True, False, False, True, False, True, False, True, False, True, False, False, False, True, False, False, False, True, False, True, False, True, False, False, True, False, False, False, False, False, False, False, False, False, False, True, True, True, False, False, True, False, True, False, False, True, False, True, False, True, False, False, False, False, False, True, False, True, False, False, False, False, True, True, False, False, True, True, False, True, True, False, True, True, False, True, False, False, True, False, True, False, False, True, False, True, True, False, False, False, False, False, True, True, False, False, False, True, True, True, False, False, False, True, True, False, True, True, True, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, True, True, False, True, False, False, True, True, False, False, True, True, True, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, True, False]",
    "SkeletonCode": "",
    "PasteExpression": false,
    "PasteFunction": false,
    "Tests": "life_7_tests.py",
    "PreviousTask": "life_6_python.json",
    "NextTask": ""
}