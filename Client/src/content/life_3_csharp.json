{
    "Language": "csharp",
    "Title": "Conway's Game of Life - Part 3",
    "Description": "life_3.html",
    "Hints": ["life_3_hint1.html","life_3_hint2.html","life_3_hint3.html"],
    "Messages": [],
    "CodeMustMatch": {},
    "CodeMustNotContain": {},
    "ReadyMadeFunctions": "static string AsGrid(List<bool> cells) => Enumerable.Range(0,400).Aggregate(\"\", (s, n) => s +(n > 0 && n % 20 ==0 ? \"\\n\":\"\")+ (cells[n] ? \"â–  \" : \"  \"));\nstatic List<bool> exampleCells = new List<bool> { false, true, false, true, false, false, true, true, true, false, false, true, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, false, true, true, true, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false, false, true, true, false, false, true, true, false, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, true, true, false, true, false, true, true, false, false, false, false, false, true, false, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, false, false, true, true, false, true, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, false, false, false, false, false, true, true, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, false, false, true, false, true, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, true, false, false, true, true, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, true, false, true, true, false, false, false, false, false, true, true, false, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, true, false, false, true, true, false, false, true, true, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false };\nstatic List<int> NeighbourCells(int c) => new List<int> { c-21, c-20, c-19, c-1, c+1, c+19, c+20, c+21 };\nstatic int KeepWithinBounds(int i) => i >= 400 ? i - 400 : i < 0 ? i + 400 : i;",
    "SkeletonCode": "",
    "PasteExpression": false,
    "PasteFunction": false,
    "Tests": "life_3_tests.cs",
    "PreviousTask": "life_2_csharp.json",
    "NextTask": "life_4_csharp.json",
    "NextTaskDoesNotClearFunctions": true
}