    Public Function Display(ByVal obj As Object) As String
        If obj Is Nothing Then Return Nothing
        If TypeOf obj Is String Then Return $"{obj}"
        If TypeOf obj Is Boolean Then Return If(CType(obj, Boolean), "true", "false")

        If TypeOf obj Is IEnumerable Then
            Dim disp = (CType(obj, IEnumerable)).Cast(Of Object)().Select(Function(o) Display(o))
            Return $"{{{String.Join(","c, disp)}}}"
        End If

        Return obj.ToString()
    End Function

    Public Function ArgString(ParamArray arguments As Object()) As String
        Return arguments.Aggregate("", Function(s, a) s & Display(a) & ", ").TrimEnd(" "c, ","c)
    End Function

    Public Function FailMessage(functionName As String, ByVal expected As Object, ByVal actual As Object, ParamArray args As Object()) As String
        Return $"xxxTest failed calling {functionName}({ArgString(args)}) Expected: {Display(expected)} Actual: {Display(actual)}xxx"
    End Function

	Public Function QAFailMessage(ByVal wrongAnswers As String) As String
		Return $"xxxWrong or missing answer(s) to question number(s): {wrongAnswers}.xxx"
	End Function

	Public Function WrongAnswers(ByVal student As String, ByVal answers As String) As String
		Dim studentArr = AsArray(student)
		Dim answersArr = AsArray(answers)
		Dim result = ""
		For n As Integer = 0 To answersArr.Length - 1
			If answersArr(n) IsNot Nothing AndAlso studentArr(n) <> answersArr(n) Then
				result &= $"{n} "
			End If
		Next n
		Return result
	End Function

	Public  Function AsArray(ByVal answers As String) As String()
		Dim arr = New String(19){}
		For Each a As String In answers.Split(ControlChars.Lf).Where(Function(x) x.Length > 0)
			Dim split = a.Split(")"c)
			Dim n = AsInt(split(0).Trim())
			arr(n) = split(1).Trim().ToUpper()
		Next a
		Return arr
	End Function

	Private Function AsInt(ByVal input As String) As Integer
		Return Convert.ToInt32(Encoding.Default.GetString(Encoding.ASCII.GetBytes(input).Where(Function(b) b > 47 AndAlso b < 58).ToArray()))
	End Function